<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- Stylesheets -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />
    <link
      href="https://unpkg.com/boxicons@2.0.9/css/boxicons.min.css"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="/stylesheets/changeStatusLt3Style.css" />
    <!-- --------- FAVICON ---------- -->
    <link
      rel="shortcut icon"
      href="assets/img/logiPsikologi.png"
      type="image/x-icon"
    />
    <title>Qurban</title>
    <!-- font awesome icon -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
      integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />

    <!-- Firebase SDK v8 -->
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-database.js"></script>
  </head>
  <body>
    <!-- SIDEBAR -->
    <section id="sidebar">
      <a href="#" class="brand"
        ><i
          class="fa-solid fa-star-and-crescent icon"
          style="color: #74c0fc"
        ></i>
        Qurban</a
      >
      <ul class="side-menu">
        <li>
          <a href="/panitLt3"
            ><i class="bx bxs-dashboard icon"></i> Dashboard</a
          >
        </li>
        <li class="divider" data-text="main">Main</li>
        <li>
          <a href="#" class="active"
            ><i class="bx bxs-chart icon"></i> Change Status</a
          >
        </li>
        <li>
          <a href="/panitLt3/revertDeliver"
            ><i class="bx bxs-chart icon"></i> Revert Deliver</a
          >
        </li>
        <li>
          <a href="/panitLt3/revertPostpone"
            ><i class="bx bxs-chart icon"></i> Revert Postpone</a
          >
        </li>
      </ul>
    </section>

    <!-- NAVBAR -->
    <section id="content">
      <nav>
        <i class="bx bx-menu toggle-sidebar"></i>
        <form action="#"></form>
        <span class="divider"></span>
        <div class="profile">
          <img src="/img/people.png" alt="" />
          <ul class="profile-link">
            <li>
              <a data-bs-toggle="modal" data-bs-target="#modalLogout"
                ><i class="bx bxs-log-out-circle"></i> Logout</a
              >
            </li>
          </ul>
        </div>
      </nav>

      <!-- MAIN -->
      <main>
        <ul class="breadcrumbs">
          <li><a href="#">Home</a></li>
          <li class="divider">/</li>
          <li><a href="#" class="active">Dashboard</a></li>
          <li class="divider">/</li>
          <li><a href="#" class="active">Change Status</a></li>
        </ul>
        <div class="info-data">
          <section class="section" id="explore">
            <!-- Project boxes will be dynamically inserted here -->
          </section>
        </div>
        <div class="data"></div>
      </main>
    </section>

    <!-- Modal Logout -->
    <div class="modal fade" id="modalLogout" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h1 class="modal-title fs-5" id="exampleModalLabel">Logout</h1>
          </div>
          <div class="modal-body">Are you sure want to logout?</div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Back
            </button>
            <a href="/auth/logout">
              <button type="button" class="btn btn-danger lastLogoutButton">
                Logout
              </button>
            </a>
          </div>
        </div>
      </div>
    </div>

    <!-- JavaScript SDK -->
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
      integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js"
      integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy"
      crossorigin="anonymous"
    ></script>
    <script src="/scripts/changeStatusLt3Script.js"></script>
    <script>
      // Konfigurasi Firebase

      // Inisialisasi Firebase
      var firebaseConfig = <%- JSON.stringify(firebaseConfig) %>;
      firebase.initializeApp(firebaseConfig);
      const database = firebase.database();

      // Referensi ke path data sapi
      const sapiRef = database.ref("sapi/");

      // Fungsi untuk memperbarui konten halaman
      function updateDataOnPage(mudhohiList) {
        const exploreSection = document.getElementById("explore");
        exploreSection.innerHTML = ""; // Kosongkan kontainer
        const body = document.querySelector("body");

        for (
          let index = 0;
          index < Math.floor(mudhohiList.length / 3) + 1;
          index++
        ) {
          const projectContainer = document.createElement("div");
          projectContainer.className = "project-container";

          for (let i = index * 3; i < index * 3 + 3; i++) {
            if (i < mudhohiList.length) {
              const mudhohi = mudhohiList[i];
              const projectBox = document.createElement("div");
              projectBox.className = "project-box";
              projectBox.setAttribute("data-bs-toggle", "modal");
              projectBox.setAttribute(
                "data-bs-target",
                `#modalMudhohi${mudhohi.idMudhohi}`
              );

              projectBox.innerHTML = `
                <i class="fa-solid fa-person" style="color: #74C0FC;"></i>
                <h3>${mudhohi.name}</h3>
                <label>${mudhohi.alamat}</label>
                <label>No Sapi: ${mudhohi.noSapi}</label>
              `;
              projectContainer.appendChild(projectBox);

              // buat modal
              const modal = document.createElement("div");
              modal.className = "modal fade";
              modal.setAttribute("id", `modalMudhohi${mudhohi.idMudhohi}`);
              modal.setAttribute("tabindex", "-1");
              modal.setAttribute("aria-labelledby", "exampleModalLabel");
              modal.setAttribute("aria-hidden", "true");
              modal.innerHTML = `
                <div class="modal-dialog">
                  <div class="modal-content">
                    <div class="modal-header">
                      <h1 class="modal-title fs-5" id="exampleModalLabel">${mudhohi.name}</h1>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                      <b>Alamat : </b> ${mudhohi.alamat} <br>
                      <b>No Handphone : </b> ${mudhohi.noHP} <br>
                    </div>
                    <div class="modal-footer">
                      <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                      <button type="button" class="btn btn-danger postponeDagingButton" data-idMudhohi="${mudhohi.idMudhohi}" data-idSapi="${mudhohi.noSapi}">Postpone</button>
                      <button type="button" class="btn btn-primary deliverDagingButton" data-idMudhohi="${mudhohi.idMudhohi}" data-idSapi="${mudhohi.noSapi}">Deliver</button>
                    </div>
                  </div>
                </div>
              `;
              body.appendChild(modal);
            }
          }
          exploreSection.appendChild(projectContainer);
        }
      }

      async function transformData(data) {
        const result = [];

        // Loop melalui setiap key di object data
        for (const idSapi in data) {
          const sapi = data[idSapi];
          const sapiObj = {
            idSapi: idSapi,
            foto: sapi.foto,
            state: sapi.state,
            mudhohi: [],
          };

          // Loop melalui setiap key di dalam object sapi
          for (const key in sapi) {
            if (
              key !== "foto" &&
              key !== "state" &&
              typeof sapi[key] === "object"
            ) {
              // Fetch mudhohi data from "mudhohis/"
              const mudhohiObj = await database
                .ref("mudhohis/" + key)
                .once("value")
                .then((snapshot) => snapshot.val());

              // Fetch name from "users/" based on mudhohiId
              const userObj = await database
                .ref("users/")
                .orderByChild("mudhohiId")
                .equalTo(key)
                .once("value")
                .then((snapshot) => {
                  const userData = snapshot.val();
                  if (userData) {
                    // Retrieve the first user's name
                    const firstUserKey = Object.keys(userData)[0];
                    return userData[firstUserKey].name;
                  }
                  return null;
                });

              // Add mudhohi object with the name and additional fields to sapiObj
              sapiObj.mudhohi.push({
                idMudhohi: key,
                ...mudhohiObj,
                name: userObj,
                isDelivered: sapi[key].isDelivered,
                isPostponed: sapi[key].isPostponed,
                bukti: sapi[key].bukti,
              });
            }
          }

          result.push(sapiObj);
        }

        return result;
      }

      // Listen untuk perubahan data
      sapiRef.on("value", async (snapshot) => {
        const data = snapshot.val();
        if (data) {
          const sapiArray = await transformData(data);

          // Filter sapiArray untuk hanya menyertakan sapi dengan state "Siap Dibagikan" atau "Sedang Dibagikan"
          const filteredSapiArray = sapiArray.filter(
            (sapi) =>
              sapi.state === "Siap Dibagikan" ||
              sapi.state === "Sedang Dibagikan ke Mudhohi"
          );

          // Extract mudhohi from the filtered sapi
          var mudhohiList = filteredSapiArray.flatMap((sapi) => sapi.mudhohi);

          // filter hanya mudhohi yaang isDelivered dan isPostponednya false saja
          mudhohiList = mudhohiList.filter(
            (mudhohi) =>
              mudhohi.isDelivered === false && mudhohi.isPostponed === false
          );
          console.log(mudhohiList);

          // Update halaman dengan mudhohiList
          updateDataOnPage(mudhohiList);

          // deliverDagingButton handler
          const deliverDagingButton = document.querySelectorAll(
            ".deliverDagingButton"
          );
          deliverDagingButton.forEach((button) => {
            button.addEventListener("click", async (e) => {
              e.preventDefault();
              const idMudhohi = button.dataset.idmudhohi;
              const idSapi = parseInt(button.dataset.idsapi);
              console.log({ idMudhohi, idSapi });
              console.log(button);

              const url = "/panitLt3/deliver";
              const data = { idSapi, idMudhohi, bukti: "" };
              const option = {
                method: "PUT",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify(data),
              };
              const result = await fetch(url, option);
              const statusCode = result.status;
              const hasil = await result.json();
              if (statusCode != 200) {
                console.log(hasil);
              } else {
                console.log("berhasil fetch");

                // Temukan elemen modal berdasarkan id mudhohi
                const modalElement = document.getElementById(
                  `modalMudhohi${idMudhohi}`
                );

                // Pastikan modal diakses dengan aman
                if (modalElement) {
                  // Jika menggunakan Bootstrap 5 dan modal instance diperlukan
                  const modalInstance =
                    bootstrap.Modal.getInstance(modalElement);
                  if (modalInstance) {
                    modalInstance.hide(); // Menutup modal dengan Bootstrap

                    // Berikan waktu agar Bootstrap menyelesaikan proses tutup modal
                    setTimeout(() => {
                      // Hapus modal element jika perlu
                      modalElement.classList.remove("show");
                      modalElement.removeAttribute("aria-modal");
                      modalElement.style.display = "none";

                      // Hilangkan backdrop
                      const modalBackdrop =
                        document.querySelector(".modal-backdrop");
                      if (modalBackdrop) {
                        modalBackdrop.remove();
                      }

                      // Kembalikan scroll pada body
                      document.body.classList.remove("modal-open");
                      document.body.style = "";

                      modalInstance.dispose(); // Hapus instance modal
                    }, 300); // Menunda selama 300ms
                  }
                }
              }
            });
          });

          // deliverDagingButton handler
          const postponeDagingButton = document.querySelectorAll(
            ".postponeDagingButton"
          );
          postponeDagingButton.forEach((button) => {
            button.addEventListener("click", async (e) => {
              e.preventDefault();
              const idMudhohi = button.dataset.idmudhohi;
              const idSapi = parseInt(button.dataset.idsapi);
              console.log({ idMudhohi, idSapi });
              console.log(button);

              const url = "/panitLt3/postpone";
              const data = { idSapi, idMudhohi };
              const option = {
                method: "PUT",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify(data),
              };
              const result = await fetch(url, option);
              const statusCode = result.status;
              const hasil = await result.json();
              if (statusCode != 200) {
                console.log(hasil);
              } else {
                console.log("berhasil fetch");

                // Temukan elemen modal berdasarkan id mudhohi
                const modalElement = document.getElementById(
                  `modalMudhohi${idMudhohi}`
                );

                // Pastikan modal diakses dengan aman
                if (modalElement) {
                  // Jika menggunakan Bootstrap 5 dan modal instance diperlukan
                  const modalInstance =
                    bootstrap.Modal.getInstance(modalElement);
                  if (modalInstance) {
                    modalInstance.hide(); // Menutup modal dengan Bootstrap

                    // Berikan waktu agar Bootstrap menyelesaikan proses tutup modal
                    setTimeout(() => {
                      // Hapus modal element jika perlu
                      modalElement.classList.remove("show");
                      modalElement.removeAttribute("aria-modal");
                      modalElement.style.display = "none";

                      // Hilangkan backdrop
                      const modalBackdrop =
                        document.querySelector(".modal-backdrop");
                      if (modalBackdrop) {
                        modalBackdrop.remove();
                      }

                      // Kembalikan scroll pada body
                      document.body.classList.remove("modal-open");
                      document.body.style = "";

                      modalInstance.dispose(); // Hapus instance modal
                    }, 300); // Menunda selama 300ms
                  }
                }
              }
            });
          });
        }
      });
    </script>
  </body>
</html>
